import 'package:flutter/foundation.dart';
import 'package:logger/logger.dart';

/// Log a message at level [Level.verbose].
void logV(dynamic message, [dynamic error, StackTrace? stackTrace]) {
  _logger.v(message, error, stackTrace);
}

/// Log a message at level [Level.debug].
void logD(dynamic message, [dynamic error, StackTrace? stackTrace]) {
  _logger.d(message, error, stackTrace);
}

/// Log a message at level [Level.info].
void logI(dynamic message, [dynamic error, StackTrace? stackTrace]) {
  _logger.i(message, error, stackTrace);
}

/// Log a message at level [Level.warning].
void logW(dynamic message, [dynamic error, StackTrace? stackTrace]) {
  _logger.w(message, error, stackTrace);
}

/// Log a message at level [Level.error].
void logE(dynamic message, [dynamic error, StackTrace? stackTrace]) {
  _logger.e(message, error, stackTrace);
}

/// Log a message at level [Level.wtf].
void logWtf(dynamic message, [dynamic error, StackTrace? stackTrace]) {
  _logger.wtf(message, error, stackTrace);
}

final _logger = Logger(
  level: Level.debug,
  output: _ConsoleOutput(),
  printer: _CustomPrettyPrinter(),
);

class _ConsoleOutput extends LogOutput {
  @override
  void output(OutputEvent event) {
    event.lines.forEach(debugPrint);
  }
}

class _CustomPrettyPrinter extends PrettyPrinter {
  _CustomPrettyPrinter()
      : super(
          methodCount: 6,
          stackTraceBeginIndex: 4,
          colors: false,
          printTime: true,
        );

  /// Matches a stacktrace line as generated on Android/iOS devices.
  /// For example:
  /// #1      Logger.log (package:logger/src/logger.dart:115:29)
  static final _deviceStackTraceRegex =
      RegExp(r'#[0-9]+[\s]+(.+) \(([^\s]+)\)');

  /// Matches a stacktrace line as generated by Flutter web.
  /// For example:
  /// packages/logger/src/printers/pretty_printer.dart 91:37
  static final _webStackTraceRegex =
      RegExp(r'^((packages|dart-sdk)\/[^\s]+\/)');

  /// Matches a stacktrace line as generated by browser Dart.
  /// For example:
  /// dart:sdk_internal
  /// package:logger/src/logger.dart
  static final _browserStackTraceRegex =
      RegExp(r'^(?:package:)?(dart:[^\s]+|[^\s]+)');

  final _discardPackages = ['logger', 'fpdart'];

  @override
  String? formatStackTrace(StackTrace? stackTrace, int methodCount) {
    var lines = stackTrace.toString().split('\n');
    if (stackTraceBeginIndex > 0 && stackTraceBeginIndex < lines.length - 1) {
      lines = lines.sublist(stackTraceBeginIndex);
    }
    final formatted = <String>[];
    var count = 0;
    for (final line in lines) {
      if (_discardDeviceStacktraceLine(line) ||
          _discardWebStacktraceLine(line) ||
          _discardBrowserStacktraceLine(line) ||
          line.isEmpty) {
        continue;
      }
      formatted.add('#$count   ${line.replaceFirst(RegExp(r'#\d+\s+'), '')}');
      if (++count == methodCount) {
        break;
      }
    }

    return formatted.isEmpty ? null : formatted.join('\n');
  }

  bool _discardDeviceStacktraceLine(String line) {
    final match = _deviceStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }

    return _discardPackages
        .any((package) => match.group(2)!.startsWith('package:$package'));
  }

  bool _discardWebStacktraceLine(String line) {
    final match = _webStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }

    return _discardPackages.any(
          (package) => match.group(1)!.startsWith('packages/$package'),
        ) ||
        match.group(1)!.startsWith('dart-sdk/lib');
  }

  bool _discardBrowserStacktraceLine(String line) {
    final match = _browserStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }

    return _discardPackages
            .any((package) => match.group(1)!.startsWith('package:$package')) ||
        match.group(1)!.startsWith('dart:');
  }
}
