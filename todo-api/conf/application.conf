todo-api {
  profile = "slick.jdbc.PostgresProfile$"
  database = {

    urlPrefix = "jdbc:postgresql://"
    urlPrefix = ${?URL_PREFIX}

    # Database Host
    host = "localhost"
    host = ${?DATABASE_HOST}

    # Database DB Name
    db = "test"
    db = ${?DATABASE_DB}

    # Database Port
    port = "5432"
    port = ${?DATABASE_PORT}

    url = ${?todo-api.database.urlPrefix}""${?todo-api.database.host}":"${?todo-api.database.port}"/"${?todo-api.database.db}
    url = ${?DATABASE_URL}

    # Database User and Password
    user = "test"
    user = ${?DATABASE_USER}
    password = "test"
    password = ${?DATABASE_PASSWORD}

    // -- SETTINGS --

    driver = org.postgresql.Driver

    queueSize = 100

    numThreads = 4
    maxThreads = 4
    maxConnections = 4

    connectionTimeout = 7000
    validationTimeout = 7000
  }

}

// ERROR HANDLER

smithy4play.autoRoutePackage = "io.todo.metadata"

# Override default error handler
play.http.errorHandler = "io.todo.metadata.commons.errors.ErrorHandler"


// PLAY SECRET

play.http.secret.key = "KE;PMNWm/SGwA?IU=OqznzyyR7hFFpET0:z=rjBl:aI4UY@@Ji_mia/>Ai9@9rRR"
play.http.secret.key = ${?PLAY_HTTP_SECRET_KEY}

encryption {
  aes {
    key = ""
    key = ${?AES_ENCRYPTION_KEY}
    salt = ""
    salt = ${?AES_ENCRYPTION_SALT}
  }
}

// FILTERS

play.filters.enabled = [
  "play.filters.gzip.GzipFilter",
  "play.filters.headers.SecurityHeadersFilter",
  "play.filters.cors.CORSFilter",
  "io.todo.metadata.filters.logging.AccessLoggingFilter",
  "io.todo.metadata.filters.access.RouteBlacklistFilter"
]

play.filters.cors {
  pathPrefixes = ["/v1/", "/v2/"]
  allowedOrigins = [
    "localhost",
    "localhost:3000",
    "http://localhost:3000",
    "http://localhost",
    "http://127.0.0.1:3000",
    "http://127.0.0.1",
  ]
  allowedHttpMethods = ["GET", "POST", "PUT", "PATCH", "DELETE", "HEAD"]
  preflightMaxAge = 3 days
  supportCredentials = true
  exposedHeaders = ["Access-Control-Allow-Origin"]
}

play.filters.hosts {
  allowed = ["localhost:9000", "localhost:3000"]
}

// Access Logging (Which http status codes should be logged)

logging.access.statusList = [404, 403, 401]
logging.access.statusList = ${?LOGGING_STATUSLIST}

http.port = 8080

project.id = "todo"
project.id = ${?PROJECT_ID}

opencensus-scala {
  trace {
    sampling-probability = 1
  }
}

storage.default.bucket = "todo-data-dev"
storage.default.bucket = ${?STORAGE_DEFAULT_BUCKET}


akka.serialization.jackson {
  jackson-modules += "com.fasterxml.jackson.datatype.joda.JodaModule"
  jackson-modules += "io.todo.metadata.commons.jackson.JsValueDeSerializerModule"
}

akka {
  loglevel = "INFO"
  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = off
  actor {
    provider = "cluster"
    debug.receive = false
  }
  cluster {
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    shutdown-after-unsuccessful-join-seed-nodes = 60s
  }
}

akka.cluster.log-info-verbose = off

akka.cluster.seed-nodes = []
akka.cluster.seed-nodes = ${?AKKA_SEED_NODES}


akka.actor {
  allow-java-serialization = off
  serializers {
    jackson-json-event = "akka.serialization.jackson.JacksonJsonSerializer"
  }
  serialization-identifiers {
    jackson-json-event = 9001
  }
  serialization-bindings {
    "play.api.libs.json.JsValue" = jackson-json
  }
}

akka {
  persistence {
    state {
      plugin = "jdbc-durable-state-store"
    }
    journal {
      plugin = "jdbc-journal"
      // Enable the line below to automatically start the journal when the actorsystem is started
      auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      // Enable the line below to automatically start the snapshot-store when the actorsystem is started
      // auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
  }
}


akka-persistence-jdbc {
  shared-databases {
    slick {
      profile = "slick.jdbc.PostgresProfile$"
      db {
        host = "localhost"
        host = ${?DATABASE_HOST}
        port = "5432"
        port = ${?DATABASE_PORT}
        db = "test"
        db = ${?PERSISTENCE_DATABASE_DB}
        url = "jdbc:postgresql://"${akka-persistence-jdbc.shared-databases.slick.db.host}":"${akka-persistence-jdbc.shared-databases.slick.db.port}"/"${akka-persistence-jdbc.shared-databases.slick.db.db}"?reWriteBatchedInserts=true"
        user = "test"
        user = ${?PERSISTENCE_DATABASE_USER}
        password = "test"
        password = ${?PERSISTENCE_DATABASE_PASSWORD}
        driver = "org.postgresql.Driver"
        numThreads = 4
        maxConnections = 4
        minConnections = 1
      }
    }
  }
}


jdbc-durable-state-store {
  use-shared-db = "slick"
}

jdbc-journal {
  use-shared-db = "slick"
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  use-shared-db = "slick"
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  use-shared-db = "slick"
}


webapp.url = "https://"${?webapp.hostname}
